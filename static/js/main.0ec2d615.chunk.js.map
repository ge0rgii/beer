{"version":3,"sources":["components/beersList.jsx","components/home.jsx","components/about.jsx","components/appBar.jsx","App.js","serviceWorker.js","index.js"],"names":["BeersList","column","Header","accessor","Cell","row","src","value","style","height","alt","id","filterable","d","name","filterMethod","filter","rows","matchSorter","keys","filterAll","data","this","props","beers","columns","defaultPageSize","React","Component","Home","About","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","App","state","page","size","fetch","then","arg","json","console","log","setState","getBeers","to","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAgCeA,G,uLAzBP,IAAMC,EAAS,CAAC,CAChBC,OAAQ,QACRC,SAAS,YACTC,KAAM,SAAAC,GAAG,OAAI,yBAAKC,IAAKD,EAAIE,MAAOC,MAAO,CAACC,OAAQ,SAAUC,IAAKL,EAAIE,UACtE,CACCL,OAAQ,OACRS,GAAI,OACJC,YAAY,EACZT,SAAU,SAAAU,GAAC,OAAIA,EAAEC,MACjBC,aAAc,SAACC,EAAQC,GAAT,OAAkBC,YAAYD,EAAMD,EAAOT,MAAO,CAACY,KAAM,CAAC,WACxEC,WAAW,GACZ,CACAlB,OAAQ,UACPC,SAAU,YAEd,OACI,kBAAC,IAAD,CAAYkB,KAAMC,KAAKC,MAAMC,MAAOC,QAASxB,EAAQyB,gBAAiB,S,GAlBtDC,IAAMC,YCUfC,E,YAZX,WAAYN,GAAQ,qEACVA,I,sEAGN,OACI,yC,GANOI,IAAMC,WCaVE,E,YAZX,WAAYP,GAAQ,qEACVA,I,sEAGN,OACA,0C,GANYI,IAAMC,W,iFCOpBG,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,MAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQL,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,OAA5C,QAGA,kBAACa,EAAA,EAAD,CAAQJ,MAAM,WAAd,Y,ICuBKK,E,YA9Cb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACD+B,MAAQ,CACX9B,MAAO,IAHQ,E,sEAMV+B,EAAMC,GAAO,IAAD,OACnBC,MAAM,8CAAD,OAA+CF,EAA/C,qBAAgEC,IAAQE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAAArC,GACxGwC,QAAQC,IAAIzC,GACZ,EAAK0C,SAAS,CACZvC,MAAOH,Q,0CAMXC,KAAK0C,SAAS,EAAG,M,+BAET,IAAD,OAEP,OAEE,kBAAC,IAAD,KACE,6BACA,kBAACxB,EAAD,OAEA,yBAAKE,UAAU,OACb,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMuB,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAGR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,SAASC,UAAWtC,IAChC,kBAAC,IAAD,CAAOqC,KAAK,SAASE,OAAQ,SAAA9C,GAAK,OAAI,kBAAC,EAAD,iBAAeA,EAAf,CAAsBC,MAAO,EAAK8B,MAAM9B,mB,GAtCvEG,IAAMC,WCEL0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.0ec2d615.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactTable from 'react-table';\r\nimport matchSorter from 'match-sorter';\r\nimport 'react-table/react-table.css';\r\n\r\nclass BeersList extends React.Component {\r\n    render() {\r\n        const column = [{\r\n        Header: 'Image',\r\n        accessor:\"image_url\",\r\n        Cell: row => <img src={row.value} style={{height: '100px'}} alt={row.value}></img>\r\n    }, {\r\n        Header: 'Name',\r\n        id: 'name',\r\n        filterable: true,\r\n        accessor: d => d.name,\r\n        filterMethod: (filter, rows) => matchSorter(rows, filter.value, {keys: ['name']}),\r\n        filterAll: true\r\n    }, {\r\n       Header: 'TagLine',\r\n        accessor: 'tagline'\r\n    }];\r\n    return(\r\n        <ReactTable data={this.props.beers} columns={column} defaultPageSize={20}/>\r\n    );\r\n        \r\n\r\n    \r\n    }\r\n   \r\n}\r\n\r\nexport default BeersList;","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                Home\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n        <div>\r\n            About\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n} ","import React from 'react';\nimport './App.css';\nimport BeersList from './components/beersList';\nimport Home from './components/home';\nimport About from './components/about';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport ButtonAppBar from './components/appBar';\n\n\n\nclass  App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beers: [],\n    }\n  }\n  getBeers(page, size) {\n    fetch(`https://api.punkapi.com/v2/beers?page?page=${page}&per_page=${size}`).then(arg => arg.json()).then(data => {\n      console.log(data);\n      this.setState({\n        beers: data\n      })\n    });\n    \n  }\n  componentDidMount() {\n    this.getBeers(1, 80);\n  }\n  render() {\n\n    return(\n      \n      <Router>\n        <div>\n        <ButtonAppBar/>\n      </div>\n        <div className='App'>\n          <nav>\n            <ul>\n              <li><Link to='/'>Home</Link></li>\n              <li><Link to='/about'>About</Link></li>\n              <li><Link to='/beers'>Beers</Link></li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/about' component={About}/>\n            <Route path='/beers' render={props => <BeersList {...props} beers={this.state.beers}/>}/>\n          </Switch>\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}